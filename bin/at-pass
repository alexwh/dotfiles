#!/usr/bin/env zsh
# set -ue

password_store="$HOME/.password-store"

while getopts "up" opt;do
	case $opt in
		u) TYPE_USERNAME="1" ;;
		p) TYPE_PASSWORD="1" ;;
		:) usage "-${OPTARG} requires an argument." ; exit 1 ;;
		\?) usage "Invalid option -${OPTARG}" ; exit 1;;
	esac
done
shift $((OPTIND-1))

autotype() {
	# get the deets
	output="$(pass $*)"

	# fail fast if it doesn't exist
	exit_code="$?"
	if [[ "$exit_code" -gt 0 ]]; then
		exit "$exit_code" # $? is the result of [[ now
	fi

	# extract the junk we want
	password="$(printf "%s" "$output" | head -n 1)"
	username="$(printf "%s" "$output" | grep '^username: ' | cut -c 11-)"

	# send those key presses to the window
	active_window_id="$(xdotool getactivewindow)"

	# need at least a password
	if [[ -n "$password" && $TYPE_PASSWORD = "1" ]]; then
		if [[ -n "$username" && $TYPE_USERNAME = "1" ]]; then
			xdotool type --window "$active_window_id" -- "$username"
			sleep 0.5
			xdotool key --window "$active_window_id" "Tab"
			sleep 0.5
		fi
		# security risk - password shows up in process list. is there any alternative?
		xdotool type --window "$active_window_id" -- "$password"
		sleep 0.5
		xdotool key --window "$active_window_id" "Return"
		sleep 0.5
	else
		notify-send "no pass to type"
		exit 1
	fi
}

# make sure the password store exists
if [[ ! -d "$password_store" ]]; then
	echo "The password store at $password_store doesn't exist"
	exit 1
fi

# discern a list of possibilities
candidates="$(find "$password_store" -name '*gpg' -print0 |
tr "\0" "\n" |
sed "s#$password_store/##;s#\.gpg\$##")"

# ask which
choice="$(echo -n "$candidates" | sort | dmenu -i -p 'autotype')"

# fail if they didn't supply anything
if [[ -z "$choice" ]]; then
	exit 2
fi

# notify which we found, using stderr so it isn't piped to anything else
echo "Using $choice." 1>&2

# delegate to pass
autotype "$choice" $*
